{
  "name": "lite-server",
  "version": "2.0.1",
  "description": "Lightweight development node server for serving a web app, providing a fallback for browser history API, loading in the browser, and injecting scripts on the fly.",
  "main": "./lib/lite-server",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/johnpapa/lite-server.git"
  },
  "keywords": [],
  "contributors": [
    {
      "name": "John Papa",
      "email": "john@johnpapa.net"
    },
    {
      "name": "Christopher Martin",
      "email": "cgmartin@gmail.com"
    }
  ],
  "license": "MIT",
  "bin": {
    "lite-server": "./bin/lite-server"
  },
  "homepage": "https://github.com/johnpapa/lite-server#readme",
  "dependencies": {
    "browser-sync": "^2.11.1",
    "connect-history-api-fallback": "^1.1.0",
    "connect-logger": "0.0.1",
    "lodash": "^4.1.0"
  },
  "devDependencies": {},
  "readme": "# lite-server\n\nLightweight *development only* node server that serves a web app, opens it in the browser, refreshes when html or javascript change, injects CSS changes using sockets, and has a fallback page when a route is not found.\n\n## Why\n\nBrowserSync does most of what we want in a super fast lightweight development server. It serves the static content, detects changes, refreshes the browser, and offers many customizations.\n\nWhen creating a SPA there are routes that are only known to the browser. For example, `/customer/21` may be a client side route for an Angular app. If this route is entered manually or linked to directly as the entry point of the Angular app (aka a deep link) the static server will receive the request, because Angular is not loaded yet. The server will not find a match for the route and thus return a 404. The desired behavior in this case is to return the `index.html` (or whatever starting page of the app we have defined). BrowserSync does not automatically allow for a fallback page. But it does allow for custom middleware. This is where `lite-server` steps in.\n\n`lite-server` is a simple customized wrapper around BrowserSync to make it easy to serve SPAs.\n\n## Usage\n\nThe default behavior serves from the current folder, opens a browser, and applies a HTML5 route fallback to `./index.html`.\n\n```\n$ lite-server\n```\n\n## Custom Configuration\nlite-server uses [BrowserSync](https://www.browsersync.io/), and allows for configuration overrides via a local `bs-config.json` or `bs-config.js` file in your project.\n\nFor example, to change the server port, watched file paths, and base directory for your project, create a `bs-config.json` in your project's folder:\n```json\n{\n  \"port\": 8000,\n  \"files\": [\"./src/**/*.{html,htm,css,js}\"],\n  \"server\": { \"baseDir\": \"./src\" }\n}\n```\n\nA more complicated example with modifications to the server middleware can be done with a `bs-config.js` file, which requires the `module.exports = { ... };` syntax:\n```js\nmodule.exports = {\n  server: {\n    middleware: {\n      // overrides the second middleware default with new settings\n      1: require('connect-history-api-fallback')({index: '/index.html', verbose: true})\n    }\n  }\n};\n```\n\n**NOTE:** Keep in mind that when using middleware overrides the specific middleware module must be installed in your project. For the above example, you'll need to do:\n```bash\n$ npm install connect-history-api-fallback --save-dev\n```\n\n...otherwise you'll get an error similar to:\n```\nError: Cannot find module 'connect-history-api-fallback'\n```\n\nAnother example: To remove one of the [default middlewares](./lib/config-defaults.js), such as `connect-logger`, you can set it's array index to `null`:\n\n```js\nmodule.exports = {\n  server: {\n    middleware: {      \n      0: null     // removes default `connect-logger` middleware\n    }\n  }\n};\n```\n\nA list of the entire set of BrowserSync options can be found in its docs: <http://www.browsersync.io/docs/options/>\n\n## Known Issues\nCSS with Angular 2 is embedded thus even though BrowserSync detects the file change to CSS, it does not inject the file via sockets. As a workaround, `injectChanges` defaults to `false`.\n\n## License\n\nCode released under the [MIT license](./LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "lite-server@2.0.1",
  "dist": {
    "shasum": "f9784788725395fb35dc1492e4504406bdb5e05d"
  },
  "_from": "lite-server@^2.0.1",
  "_resolved": "https://registry.npmjs.org/lite-server/-/lite-server-2.0.1.tgz"
}
